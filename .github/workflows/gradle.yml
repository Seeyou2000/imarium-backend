name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      DB_HOST: my_mariadb
      DB_PORT: 3306
      DB_DATABASE: springbootdb
      DB_USERNAME: root
      DB_PASSWORD: maria

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
      # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

  deploy:
    needs: build  # Ensure deployment runs only after the build job completes
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to AWS EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.AWS_EC2_HOST }}           # The EC2 public IP or hostname
          username: ${{ secrets.AWS_EC2_USER }}       # The EC2 user (e.g., ec2-user, ubuntu)
          key: ${{ secrets.AWS_EC2_KEY }}             # SSH private key stored in GitHub Secrets
          port: 22
          script: |
            cd /home/ubuntu                           # Navigate to the project directory on EC2
            git pull origin main                      # Pull the latest changes
            docker-compose down                       # Stop any existing containers
            docker-compose up -d --build              # Rebuild and restart the containers
